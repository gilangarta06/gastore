// ========================================
// FILE 2: /app/api/midtrans/notification/route.ts (FIXED)
// ========================================
import { NextResponse } from "next/server";
import { connectDB } from "@/lib/db/mongodb";
import { Order } from "@/lib/db/models/Order";
import { Product } from "@/lib/db/models/Product";
import { sendWhatsApp } from "@/lib/services/whatsapp";

export async function POST(req: Request) {
  try {
    await connectDB();

    const body = await req.json();
    console.log("üì© Midtrans notification received:", JSON.stringify(body, null, 2));

    const { order_id, transaction_status, fraud_status } = body;

    // üîç Cari order berdasarkan midtransOrderId (ORD-XXXXXX)
    const order = await Order.findOne({ midtransOrderId: order_id }).populate("productId");
    
    if (!order) {
      console.warn(`‚ö†Ô∏è Order dengan midtransOrderId ${order_id} tidak ditemukan`);
      return NextResponse.json({ message: "Order not found" }, { status: 200 });
    }

    console.log(`‚úÖ Order ditemukan: ${order.orderId} (Midtrans: ${order.midtransOrderId})`);

    const product = await Product.findById(order.productId?._id);
    if (!product) {
      console.warn(`‚ö†Ô∏è Produk tidak ditemukan`);
      return NextResponse.json({ message: "Product not found" }, { status: 200 });
    }

    // üéØ INVOICE URL - pakai orderId (INV-XXXXXX) untuk user
    const invoiceUrl = `${process.env.NEXT_PUBLIC_BASE_URL}/invoice/${order.orderId}`;

    console.log(`üìù Status: ${transaction_status}, Fraud: ${fraud_status || 'N/A'}`);

    // Handle status transaksi
    if (transaction_status === "capture") {
      if (fraud_status === "accept") {
        order.status = "paid";
        await order.save();
        console.log(`‚úÖ Order ${order.orderId} paid (capture + accept)`);
        await sendNotifications(order, product, invoiceUrl);
      } else {
        order.status = "pending";
        await order.save();
        console.log(`‚è≥ Order ${order.orderId} pending (fraud: ${fraud_status})`);
      }
    } 
    else if (transaction_status === "settlement") {
      order.status = "paid";
      await order.save();
      console.log(`‚úÖ Order ${order.orderId} paid (settlement)`);
      await sendNotifications(order, product, invoiceUrl);
    } 
    else if (transaction_status === "pending") {
      order.status = "pending";
      await order.save();
      console.log(`‚è≥ Order ${order.orderId} pending`);
    } 
    else if (["expire", "cancel", "deny"].includes(transaction_status)) {
      order.status = "cancelled";
      await order.save();
      
      await returnAccountToStock(order, product);

      if (process.env.ADMIN_PHONE) {
        await sendWhatsApp(
          process.env.ADMIN_PHONE,
          `‚ùå *ORDER DIBATALKAN*\nüßæ ${order.orderId}\nüë§ ${order.customerName}\nProduk: ${product.name} (${order.variant.name})`
        );
      }

      console.log(`‚ùå Order ${order.orderId} dibatalkan`);
    }

    return NextResponse.json({ message: "Notification handled" }, { status: 200 });
    
  } catch (err) {
    console.error("‚ùå Midtrans callback error:", err);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

// üì§ Helper: Kirim notifikasi
async function sendNotifications(order: any, product: any, invoiceUrl: string) {
  const account = order.account;

  if (account && account.username && account.password) {
    // üí¨ Pesan ke PEMBELI (pakai orderId INV-XXXXXX)
    const messageCustomer = `
üéâ *PEMBAYARAN BERHASIL!* üéâ

Halo *${order.customerName}*! 

Terima kasih atas pembayaran Anda.
Berikut detail pesanan dan akun Anda:

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üßæ *Order ID:* ${order.orderId}
üì¶ *Produk:* ${product.name}
üîñ *Variant:* ${order.variant.name}
üí∞ *Total Dibayar:* Rp${order.total?.toLocaleString("id-ID")}
üìÖ *Tanggal:* ${new Date().toLocaleString("id-ID")}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üîê *DETAIL AKUN ANDA*
üë§ *Username:* \`${account.username}\`
üîë *Password:* \`${account.password}\`

üßæ *Lihat Invoice Anda:*
${invoiceUrl}

_Terima kasih telah berbelanja di GA Store üíô_
`;

    // üí¨ Pesan ke ADMIN
    const messageAdmin = `
üì¢ *ORDER BARU LUNAS!*

üßæ *Order ID:* ${order.orderId}
üÜî *Midtrans ID:* ${order.midtransOrderId}
üë§ *Nama:* ${order.customerName}
üìû *Nomor:* ${order.phone}
üì¶ *Produk:* ${product.name} (${order.variant.name})
üí∞ *Total:* Rp${order.total?.toLocaleString("id-ID")}
üìÖ *Tanggal:* ${new Date().toLocaleString("id-ID")}

üîó *Invoice:* ${invoiceUrl}

‚úÖ Order berhasil dibayar dan akun sudah terkirim ke pembeli.
`;

    try {
      await sendWhatsApp(order.phone, messageCustomer);
      console.log(`‚úÖ WA ke pembeli ${order.phone} berhasil`);
      
      if (process.env.ADMIN_PHONE) {
        await sendWhatsApp(process.env.ADMIN_PHONE, messageAdmin);
        console.log(`‚úÖ WA ke admin berhasil`);
      }
    } catch (err) {
      console.error("‚ùå Error sending WA:", err);
    }

  } else {
    console.warn(`‚ö†Ô∏è Akun tidak tersedia di order ${order.orderId}`);
  }
}

// ‚ôªÔ∏è Helper: Kembalikan akun ke stok
async function returnAccountToStock(order: any, product: any) {
  const variant = product.variants.find((v: any) => v.name === order.variant.name);
  if (variant && order.account) {
    variant.accounts.unshift(order.account);
    variant.quantity += 1;
    await product.save();
    console.log(`‚ôªÔ∏è Akun dikembalikan ke stok untuk order ${order.orderId}`);
  }
}
